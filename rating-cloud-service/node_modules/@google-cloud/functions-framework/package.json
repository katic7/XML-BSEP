{
  "_from": "@google-cloud/functions-framework",
  "_id": "@google-cloud/functions-framework@1.1.1",
  "_inBundle": false,
  "_integrity": "sha512-jv4+cV5TobVq6DU7F2cqlQeSKwW0SbiplD5VnLuxGEQx5YB12QDlMlwnqEDpM3s3Wz1XtgAYR4EU9LW3kKVPqA==",
  "_location": "/@google-cloud/functions-framework",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "@google-cloud%2ffunctions-framework",
    "fetchSpec": "latest",
    "name": "@google-cloud/functions-framework",
    "raw": "@google-cloud/functions-framework",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "scope": "@google-cloud",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@google-cloud/functions-framework/-/functions-framework-1.1.1.tgz",
  "_shasum": "af93c6df1271035bd9f41be219483a0186ae3194",
  "_shrinkwrap": null,
  "_spec": "@google-cloud/functions-framework",
  "_where": "C:\\Users\\Korisnik\\Desktop\\XML-BSEP\\rating-cloud-service",
  "author": {
    "name": "Google Inc."
  },
  "bin": {
    "functions-framework": "./build/src/index.js"
  },
  "bugs": {
    "url": "https://github.com/GoogleCloudPlatform/functions-framework-nodejs/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "body-parser": "^1.18.3",
    "express": "^4.16.4",
    "minimist": "^1.2.0",
    "on-finished": "^2.3.0"
  },
  "deprecated": false,
  "description": "FaaS (Function as a service) framework for writing portable Node.js functions",
  "devDependencies": {
    "@types/body-parser": "^1.17.0",
    "@types/express": "^4.16.1",
    "@types/minimist": "^1.2.0",
    "@types/mocha": "^5.2.6",
    "@types/node": "^11.9.5",
    "@types/on-finished": "^2.3.1",
    "@types/supertest": "^2.0.7",
    "gts": "^1.0.0-0",
    "mocha": "^6.0.0",
    "power-assert": "^1.6.1",
    "supertest": "^3.4.2",
    "typescript": "^3.3.3333"
  },
  "engines": {
    "node": ">=10.0.0"
  },
  "files": [
    "build/src/*.js",
    "build/src/*.d.ts"
  ],
  "homepage": "https://github.com/GoogleCloudPlatform/functions-framework-nodejs#readme",
  "license": "Apache-2.0",
  "main": "build/src/index.js",
  "name": "@google-cloud/functions-framework",
  "optionalDependencies": {},
  "readme": "# Functions Framework for Node.js [![Build Status](https://travis-ci.com/GoogleCloudPlatform/functions-framework-nodejs.svg?branch=master)](https://travis-ci.com/GoogleCloudPlatform/functions-framework-nodejs) [![npm version](https://img.shields.io/npm/v/@google-cloud/functions-framework.svg)](https://www.npmjs.com/package/@google-cloud/functions-framework)\r\n\r\nAn open source FaaS (Function as a service) framework for writing portable\r\nNode.js functions -- brought to you by the Google Cloud Functions team.\r\n\r\nThe Functions Framework lets you write lightweight functions that run in many\r\ndifferent environments, including:\r\n\r\n*   [Google Cloud Functions](https://cloud.google.com/functions/)\r\n*   Your local development machine\r\n*   [Cloud Run and Cloud Run on GKE](https://cloud.google.com/run/)\r\n*   [Knative](https://github.com/knative/)-based environments\r\n\r\nThe framework allows you to go from:\r\n\r\n```js\r\nexports.helloWorld = (req, res) => {\r\n  res.send('Hello, World');\r\n};\r\n```\r\n\r\nTo:\r\n\r\n```sh\r\ncurl http://my-url\r\n# Output: Hello, World\r\n```\r\n\r\nAll without needing to worry about writing an HTTP server or complicated request\r\nhandling logic.\r\n\r\n# Features\r\n\r\n*   Spin up a local development server for quick testing\r\n*   Invoke a function in response to a request\r\n*   Automatically unmarshal events conforming to the\r\n    [CloudEvents](https://cloudevents.io/) spec\r\n*   Portable between serverless platforms\r\n\r\n# Installation\r\n\r\nAdd the Functions Framework to your `package.json` file using `npm`.\r\n\r\n```sh\r\nnpm install @google-cloud/functions-framework\r\n```\r\n\r\n# Quickstart: Hello, World on your local machine\r\n\r\nCreate an `index.js` file with the following contents:\r\n\r\n```js\r\nexports.helloWorld = (req, res) => {\r\n  res.send('Hello, World');\r\n};\r\n```\r\n\r\nRun the following command:\r\n\r\n```sh\r\nnpx @google-cloud/functions-framework --target=helloWorld\r\n```\r\n\r\nOpen http://localhost:8080/ in your browser and see *Hello, World*.\r\n\r\n\r\n# Quickstart: Set up a new project\r\n\r\nCreate an `index.js` file with the following contents:\r\n\r\n```js\r\nexports.helloWorld = (req, res) => {\r\n  res.send('Hello, World');\r\n};\r\n```\r\n\r\nTo run a function locally, first create a `package.json` file using `npm init`:\r\n\r\n```sh\r\nnpm init\r\n```\r\n\r\nNow install the Functions Framework:\r\n\r\n```sh\r\nnpm install @google-cloud/functions-framework\r\n```\r\n\r\nAdd a `start` script to `package.json`, with configuration passed via\r\ncommand-line arguments:\r\n\r\n```js\r\n  \"scripts\": {\r\n    \"start\": \"functions-framework --target=helloWorld\"\r\n  }\r\n```\r\n\r\nUse `npm start` to start the built-in local development server:\r\n\r\n```sh\r\nnpm start\r\n...\r\nServing function...\r\nFunction: helloWorld\r\nURL: http://localhost:8080/\r\n```\r\n\r\nSend requests to this function using `curl` from another terminal window:\r\n\r\n```sh\r\ncurl localhost:8080\r\n# Output: Hello, World\r\n```\r\n\r\n# Run your function on serverless platforms\r\n\r\n## Google Cloud Functions\r\n\r\nThe\r\n[Node.js 10 runtime on Google Cloud Functions](https://cloud.google.com/functions/docs/concepts/nodejs-10-runtime)\r\nis based on the Functions Framework. On Cloud Functions, the Functions Framework\r\nis completely optional: if you don't add it to your `package.json`, it will be\r\ninstalled automatically.\r\n\r\nAfter you've written your function, you can simply deploy it from your local\r\nmachine using the `gcloud` command-line tool.\r\n[Check out the Cloud Functions quickstart](https://cloud.google.com/functions/docs/quickstart).\r\n\r\n## Cloud Run/Cloud Run on GKE\r\n\r\nOnce you've written your function, added the Functions Framework and updated your `start` script in `package.json`, all that's left is to create a container image. [Check out the Cloud Run quickstart](https://cloud.google.com/run/docs/quickstarts/build-and-deploy) for Node.js to create a container image and deploy it to Cloud Run. You'll write a `Dockerfile` when you build your container. This `Dockerfile` allows you to specify exactly what goes into your container (including custom binaries, a specific operating system, and more).\r\n\r\nIf you want even more control over the environment, you can [deploy your container image to Cloud Run on GKE](https://cloud.google.com/run/docs/quickstarts/prebuilt-deploy-gke). With Cloud Run on GKE, you can run your function on a GKE cluster, which gives you additional control over the environment (including use of GPU-based instances, longer timeouts and more).\r\n\r\n## Container environments based on Knative\r\n\r\nCloud Run and Cloud Run on GKE both implement the [Knative Serving API](https://www.knative.dev/docs/). The Functions Framework is designed to be compatible with Knative environments. Just build and deploy your container to a Knative environment.\r\n\r\n# Configure the Functions Framework\r\n\r\nYou can configure the Functions Framework using command-line flags or\r\nenvironment variables. If you specify both, the environment variable will be\r\nignored.\r\n\r\nCommand-line flag         | Environment variable      | Description\r\n------------------------- | ------------------------- | -----------\r\n`--port`                    | `PORT`                    | The port on which the Functions Framework listens for requests. Default: `8080`\r\n`--target`         | `FUNCTION_TARGET`         | The name of the exported function to be invoked in response to requests. Default: `function`\r\n`--signature-type` | `FUNCTION_SIGNATURE_TYPE` | The signature used when writing your function. Controls unmarshalling rules and determines which arguments are used to invoke your function. Default: `http`; accepted values: `http` or `event`\r\n\r\nYou can set command-line flags in your `package.json` via the `start` script.\r\nFor example:\r\n\r\n```js\r\n  \"scripts\": {\r\n    \"start\": \"functions-framework --target=helloWorld\"\r\n  }\r\n```\r\n\r\n# Enable CloudEvents\r\n\r\nThe Functions Framework can unmarshall incoming\r\n[CloudEvents](http://cloudevents.io) payloads to `data` and `context` objects.\r\nThese will be passed as arguments to your function when it receives a request.\r\nNote that your function must use the event-style function signature:\r\n\r\n```js\r\nexports.helloEvents = (data, context) => {\r\n  console.log(data);\r\n  console.log(context);\r\n};\r\n```\r\n\r\nTo enable automatic unmarshalling, set the function signature type to `event`\r\nusing a command-line flag or an environment variable. By default, the HTTP\r\nsignature will be used and automatic event unmarshalling will be disabled.\r\n\r\nFor more details on this signature type, check out the Google Cloud Functions\r\ndocumentation on\r\n[background functions](https://cloud.google.com/functions/docs/writing/background#cloud_pubsub_example).\r\n\r\n# Contributing\r\n\r\nContributions to this library are welcome and encouraged. See\r\n[CONTRIBUTING](CONTRIBUTING.md) for more information on how to get started.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/GoogleCloudPlatform/functions-framework-nodejs.git"
  },
  "scripts": {
    "check": "gts check",
    "clean": "gts clean",
    "compile": "tsc -p .",
    "fix": "gts fix",
    "posttest": "npm run check",
    "prepare": "npm run compile",
    "pretest": "npm run compile",
    "test": "mocha build/test"
  },
  "types": "build/src/invoker.d.ts",
  "version": "1.1.1"
}
